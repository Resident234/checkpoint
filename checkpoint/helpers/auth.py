import sys
import json
import re
import threading
import time
from pathlib import Path

import httpx
from bs4 import BeautifulSoup
from selenium.common import NoSuchElementException, TimeoutException
from selenium.webdriver import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from checkpoint import config
from checkpoint.errors import *
from checkpoint.helpers.fs import get_temp_path
from checkpoint.helpers.captha import *
from checkpoint.helpers.pages import *
from checkpoint.helpers.popups import check_popup
from checkpoint.helpers.utils import *
from checkpoint.knowledge import external, fs, pauses, retries
from checkpoint.knowledge.pages import urls
from checkpoint.objects.base import CheckPointCreds, Inp

# XPath —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
VERIFICATION_CODE_INPUT_XPATH = "//input[@type='text']"
VERIFICATION_SUBMIT_BUTTON_XPATH = "//*[text()='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']"


@print_function_name
async def check_cookies(driver: WebDriver, cookies) -> bool:
    """Checks the validity of given cookies."""
    driver.get(urls["home"])

    if check_page(driver, 'index') or check_page(driver, 'authorized'):
        return True

    if not cookies:
        return False

    for cookie in cookies:
        driver.add_cookie(cookie)

    driver.refresh()

    return check_page(driver, 'index') or check_page(driver, 'authorized')

@print_function_name
async def gen_cookies(driver: WebDriver, creds: CheckPointCreds):
    driver.get(urls["home"])

    loop_counter = 0
    while True:
        loop_counter += 1

        if loop_counter > 2:
            driver.refresh()
            loop_counter = 0

        if check_page(driver, 'login'):
            login(driver, config.USER_NAME, config.PASSWORD)
        
        if check_page(driver, 'captcha'):
            solve_captcha(driver)
        
        if check_page(driver, 'two_step_verification'):
            two_step_verification_wait(driver)
        
        if check_page(driver, 'add_trusted_device'):
            add_trusted_device(driver)
        
        if check_page(driver, 'index'):
            break
        
        if check_page(driver, 'authorized'):
            break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–∞
        if check_popup(driver, "session_timeout"):
            gb.rc.print("üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞", style="cyan")
            driver.get(urls["home"])
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
        if check_browser_error(driver):
            gb.rc.print("üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞", style="cyan")
            driver.get(urls["home"])
            continue

    creds.cookies = driver.get_cookies()


@print_function_name
async def check_and_gen(driver: WebDriver, creds: CheckPointCreds, renew: bool = False):
    """Checks the validity of the cookies and generate new ones if needed."""
    if renew or not await check_cookies(driver, creds.cookies):
        await gen_cookies(driver, creds)

    gb.rc.print("[+] Authenticated !\n", style="sea_green3")

@print_function_name
async def load_and_auth(driver: WebDriver, renew: bool = False) -> CheckPointCreds:
    """Returns an authenticated Creds object."""
    creds = CheckPointCreds()
    try:
        creds.load_creds()
    except CheckPointInvalidSession:
        print(f"Need generate a new session by doing => login")

    await check_and_gen(driver, creds, renew)

    creds.save_creds()

    return creds

@print_function_name
def login(driver: WebDriver, usr, pwd):
    # Enter user email
    elem = driver.find_element(By.NAME, "email")
    elem.send_keys(usr)
    # Enter user password
    elem = driver.find_element(By.NAME, "pass")
    elem.send_keys(pwd)
    # Login
    elem.send_keys(Keys.RETURN)

@print_function_name
def _enter_verification_code(driver: WebDriver, inp: str) -> bool:
    """
    –í–≤–æ–¥–∏—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :param driver: WebDriver instance
    :param inp: –ö–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞
    :param attempt: –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞
    :param max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    :return: True –µ—Å–ª–∏ –≤–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    """
    try:
        driver.refresh()  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        elem = driver.find_element(By.XPATH, VERIFICATION_CODE_INPUT_XPATH)
        elem.clear()
        elem.send_keys(inp)
        submit_button = driver.find_element(By.XPATH, VERIFICATION_SUBMIT_BUTTON_XPATH)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã
        current_url = driver.current_url
        submit_button.click()
        
        # –ñ–¥–µ–º, –ø–æ–∫–∞ URL –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç (—Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è)
        try:
            WebDriverWait(driver, pauses.auth.get('verification_input', 10)).until(
                lambda d: d.current_url != current_url or len(d.find_elements(By.XPATH, VERIFICATION_SUBMIT_BUTTON_XPATH)) == 0
            )
            print("[INFO] –§–æ—Ä–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
        except TimeoutException:
            print("[WARNING] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
        
        return True
    except NoSuchElementException as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {e}")
        return False

@print_function_name
def _read_saved_code(json_file_path: Path) -> str:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞
    :param json_file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–æ–¥–æ–º
    :return: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    if json_file_path.exists():
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('code')
        except (json.JSONDecodeError, KeyError):
            pass
    return None

@print_function_name
def _save_code_to_json(json_file_path: Path, code: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª
    :param json_file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    :param code: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    with open(json_file_path, 'w', encoding='utf-8') as f:
        json.dump({'code': code}, f, ensure_ascii=False, indent=2)

@print_function_name
def _check_verification_success(driver: WebDriver, inp: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–∞ –ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ
    :param driver: WebDriver instance
    :param inp: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    :param attempt: –¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞
    :param max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    :return: True –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    """
    try:
        WebDriverWait(driver, pauses.webdriver_wait['quick_check']).until(
            EC.invisibility_of_element_located((By.XPATH, "//*[text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ' or text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp']"))
        )

        return True
    except WebDriverException:
        return False
                
    except Exception as e:
        return False


@print_function_name
def _check_verification_errors(driver: WebDriver) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    :param driver: WebDriver instance
    :return: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–Ω–µ—Ç –æ—à–∏–±–æ–∫), False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
    """
    try:
        error_messages = [
            "–≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–¥–æ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω",
            "–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π",
            "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥",
            "–∫–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç",
            "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        ]

        error_found = False
        for error_msg in error_messages:
            try:
                error_element = driver.find_element(By.XPATH, f"//*[contains(text(), '{error_msg}')]")
                if error_element:
                    print(f"[WARNING] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞: {error_msg}")
                    error_found = True
                    break
            except NoSuchElementException:
                continue

        if error_found:
            return False

        return True  # –ù–µ—Ç –æ—à–∏–±–æ–∫, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å

    except Exception:
        return False


@print_function_name
def two_step_verification_wait(driver: WebDriver):
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç –∫–æ–¥ —Å —Å–∞–π—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    :param driver:
    """
    max_attempts = retries.auth['max_verification_attempts']
    
    def _verification_attempt(attempt: int) -> bool:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        :param attempt: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
        :return: True –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π
        """
        if attempt > max_attempts:
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            driver.close()
            sys.exit('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
        
        print(f"[INFO] –ü–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞: {attempt}/{max_attempts}")
        
        try:
            title = driver.find_element(By.XPATH, "//*[text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ' or text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp']")
        except NoSuchElementException:
            # –í–æ–∑–º–æ–∂–Ω–æ, –º—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
            print("[INFO] –≠–ª–µ–º–µ–Ω—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return True
        
        # –û–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
        inp = None
        threads_stop_event = threading.Event()
        json_file_path = get_temp_path(fs.files['verification_code_file'])
        
        def parse_code():
            """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–¥–∞ —Å —Å–∞–π—Ç–∞"""
            nonlocal inp
            
            # –ß–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –∏–∑ JSON —Ñ–∞–π–ª–∞
            last_code = _read_saved_code(json_file_path)
            
            while not threads_stop_event.is_set():
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    with httpx.Client(timeout=10) as client:
                        response = client.get(external.urls['habr_career_url'])
                        response.raise_for_status()
                    
                    # –ü–∞—Ä—Å–∏–º HTML
                    soup = BeautifulSoup(response.text, 'html.parser')
                    # –ò—â–µ–º –≤—Å–µ —Ç–µ–≥–∏ span
                    spans = soup.find_all('span')
                    
                    current_code = None
                    for span in spans:
                        text = span.get_text(strip=True)
                        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–û—Ç <—á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏> ‚ÇΩ"
                        salary_match = re.search(r'–û—Ç\s+([\d\s]+)\s*‚ÇΩ', text)
                        if salary_match:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
                            current_code = salary_match.group(1).replace(' ', '')
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, –µ—Å–ª–∏ –∫–æ–¥ –º–µ–Ω–µ–µ 6 –∑–Ω–∞—á–Ω—ã–π
                            current_code = current_code.zfill(6)
                            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                            print(f"[DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–¥: {current_code}")
                            break
                    
                    if current_code:
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–æ–¥–æ–º
                        if current_code != last_code:
                            print(f"[INFO] –ù–æ–≤—ã–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω: {current_code}")
                            inp = current_code

                            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
                            threads_stop_event.set()
                            return
                        else:
                            print(f"[DEBUG] –ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {current_code}")
                    else:
                        print(f"[DEBUG] –≠–ª–µ–º–µ–Ω—Ç —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if not threads_stop_event.wait(pauses.auth['thread_wait']):  # –ñ–¥–µ–º –∏–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    continue
                else:
                    break
        
        def console_input():
            """–ü–æ—Ç–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
            nonlocal inp
            try:
                user_input = Inp(f'{title.text} –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): ').get()
                if user_input:
                    print(f'–í–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç: {user_input}')
                    inp = user_input
                    threads_stop_event.set()
            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å: {e}")
                threads_stop_event.set()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø–æ—Ç–æ–∫–∞
        habr_thread = threading.Thread(target=parse_code, daemon=True, name="VerificationCodeParserThread")
        console_thread = threading.Thread(target=console_input, daemon=True, name="VerificationCodeInputThread")
        
        habr_thread.start()
        console_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤
        while not threads_stop_event.is_set():
            sleep(pauses.auth['thread_check'], "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø–æ—Ç–æ–∫
        threads_stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        habr_thread.join(timeout=1)
        console_thread.join(timeout=1)
        
        if not inp:
            print(f"[ERROR] –ö–æ–¥ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
            if attempt >= max_attempts:
                driver.close()
                sys.exit('[ERROR] –ö–æ–¥ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫')
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            return _verification_attempt(attempt + 1)
        
        print(f'–ö–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞: {inp}')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ JSON —Ñ–∞–π–ª
        _save_code_to_json(json_file_path, inp)

        # –í–≤–æ–¥–∏–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–∞–º–∞ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã)
        if not _enter_verification_code(driver, inp):
            if attempt < max_attempts:
                print(f"[INFO] –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ—É–¥–∞—á–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                return _verification_attempt(attempt + 1)
            else:
                driver.close()
                sys.exit('[ERROR] –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ—É–¥–∞—á–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if not _check_verification_errors(driver):
            if attempt < max_attempts:
                print(f"[INFO] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                return _verification_attempt(attempt + 1)
            else:
                driver.close()
                sys.exit('[ERROR] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –≤–≤–µ–¥–µ–Ω —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ
        if not _check_verification_success(driver, inp):
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤–∏–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –µ—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
            if attempt < max_attempts:
                print(f"[INFO] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                return _verification_attempt(attempt + 1)
            else:
                driver.close()
                sys.exit('[ERROR] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        else:
            return True
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
    return _verification_attempt(1)

    
    

@print_function_name
def add_trusted_device(driver: WebDriver):
    """
    –ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º"
    :param driver:
    """
    try:
        button = WebDriverWait(driver, pauses.webdriver_wait['short_wait']).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º']")))
        button.click()
    except NoSuchElementException:
        pass


