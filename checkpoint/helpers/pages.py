import json
from pathlib import Path

from selenium.common import WebDriverException
from selenium.webdriver.chrome.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from checkpoint import globals as gb
from checkpoint.helpers.utils import print_function_name
from checkpoint.helpers.fs import get_temp_path
from checkpoint.knowledge import fs, pages

WAIT_TIMEOUT = 3


@print_function_name
def check_page(driver: WebDriver, page: str) -> str | bool:
    match page:
        case 'captcha': # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–ø—á–∏
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ']")))
            except WebDriverException:
                return False
            return True

        case 'index':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[@aria-label='–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å']")))
            except WebDriverException:
                return False
            return True

        case 'login':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–ù–µ–¥–∞–≤–Ω–∏–µ –≤—Ö–æ–¥—ã' or @name='login' or text()='–í–æ–π—Ç–∏ –Ω–∞ Facebook']")))
            except WebDriverException:
                return False
            return True

        case 'two_step_verification':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ' or text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp']")))
            except WebDriverException:
                return False
            return True

        case 'add_trusted_device':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ']")))
            except WebDriverException:
                return False
            return True

        case 'authorized':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[@aria-label='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']")))
            except WebDriverException:
                return False
            return True

        case 'disabled_account':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–ú—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç']")))
            except WebDriverException:
                return False
            return True

        case 'download_account':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–°–∫–∞—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é']")))
            except WebDriverException:
                return False
            return True

        case 'creation_backup_is_processing':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–ú—ã —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π']")))
            except WebDriverException:
                return False
            return True

        case 'download_ready':
            try:
                WebDriverWait(driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, "//*[text()='–§–∞–π–ª —Å –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤']")))
            except WebDriverException:
                return False
            return True

        case _:
            return False


def load_allowed_pages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç allowed_pages –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    json_file_path = get_temp_path(fs.files['allowed_pages_file'])
    
    if json_file_path.exists():
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                allowed_pages = data.get('allowed_pages', pages.allowed_pages)
                gb.rc.print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã allowed_pages –∏–∑ —Ñ–∞–π–ª–∞: {allowed_pages}", style="cyan")
                return allowed_pages
        except (json.JSONDecodeError, KeyError) as e:
            gb.rc.print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ allowed_pages: {e}", style="yellow")
            gb.rc.print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style="yellow")
            return pages.allowed_pages
    else:
        gb.rc.print(f"üìÑ –§–∞–π–ª allowed_pages –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", style="yellow")
        return pages.allowed_pages


def save_allowed_pages(allowed_pages):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç allowed_pages –≤ JSON —Ñ–∞–π–ª"""
    json_file_path = get_temp_path(fs.files['allowed_pages_file'])
    
    try:
        data = {'allowed_pages': allowed_pages}
        with open(json_file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        gb.rc.print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã allowed_pages –≤ —Ñ–∞–π–ª: {allowed_pages}", style="green")
    except Exception as e:
        gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ allowed_pages: {e}", style="red")

def get_page_title(driver: WebDriver):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ CSS-—Å–≤–æ–π—Å—Ç–≤–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ
    
    Args:
        driver: WebDriver instance
        
    Returns:
        str: –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    style = "-webkit-box-orient: vertical; -webkit-line-clamp: 2; display: -webkit-box;"
    
    try:
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–æ—á–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Å—Ç–∏–ª—è
        xpath = f"//*//*[@style='{style}']"
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        wait = WebDriverWait(driver, WAIT_TIMEOUT)
        element = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        title_text = element.text.strip()
        
        if title_text:
            gb.rc.print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {title_text}", style="green")
            return title_text
        else:
            return None
            
    except Exception:

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Ç–∏–ª—è
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—ã–µ CSS-—Å–≤–æ–π—Å—Ç–≤–∞
            elements = driver.find_elements(By.XPATH, "//*[contains(@style, '-webkit-line-clamp: 2')]")
            
            for element in elements:
                element_style = element.get_attribute("style")
                if ("-webkit-box-orient: vertical" in element_style and 
                    "-webkit-line-clamp: 2" in element_style and 
                    "display: -webkit-box" in element_style):
                    
                    title_text = element.text.strip()
                    if title_text:
                        gb.rc.print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {title_text}", style="green")
                        return title_text
            
            return None
            
        except Exception:
            return None