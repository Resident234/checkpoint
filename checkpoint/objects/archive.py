import os
import shutil
import threading
import zipfile
from pathlib import Path
from typing import Set

from checkpoint import globals as gb
from checkpoint.knowledge import pauses
from checkpoint.knowledge.fs import path as fs_path
from checkpoint.helpers.utils import sleep
from checkpoint.helpers.fs import get_unique_filename, merge_directories


class ArchiveManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ZIP —Ñ–∞–π–ª–æ–≤
    - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω
    - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    
    def __init__(self, download_path: Path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—Ä—Ö–∏–≤–æ–≤
        
        Args:
            download_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        self.download_path = download_path
        self.to_delete_dir = download_path / fs_path['to_delete_dir']
        self.monitor_running = False
        self.monitor_thread = None
        self.processed_files: Set[str] = set()
    
    # get_unique_filename method moved to checkpoint.helpers.fs for centralized file utilities
    
    # merge_directories method moved to checkpoint.helpers.fs for centralized file utilities
    
    def extract_zip_archive(self, zip_path: Path) -> bool:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É to_delete
        
        Args:
            zip_path: –ü—É—Ç—å –∫ ZIP —Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            gb.rc.print(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: {zip_path.name}", style="cyan")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            temp_extract_dir = self.download_path / f"temp_extract_{zip_path.stem}"
            temp_extract_dir.mkdir(exist_ok=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_extract_dir)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é
            for item in temp_extract_dir.iterdir():
                target_item = self.download_path / item.name
                
                if item.is_file():
                    if target_item.exists():
                        unique_target = get_unique_filename(target_item)
                        shutil.move(str(item), str(unique_target))
                        gb.rc.print(f"üìÑ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {item.name} ‚Üí {unique_target.name}", style="yellow")
                    else:
                        shutil.move(str(item), str(target_item))
                elif item.is_dir():
                    if target_item.exists():
                        gb.rc.print(f"üìÅ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞–ø–æ–∫: {item.name}", style="cyan")
                        merge_directories(item, target_item)
                    else:
                        shutil.move(str(item), str(target_item))
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            if temp_extract_dir.exists():
                shutil.rmtree(temp_extract_dir)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ä—Ö–∏–≤ –≤ –ø–∞–ø–∫—É to_delete
            self.to_delete_dir.mkdir(exist_ok=True)
            archive_target = self.to_delete_dir / zip_path.name
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ to_delete, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
            if archive_target.exists():
                archive_target = get_unique_filename(archive_target)
            
            shutil.move(str(zip_path), str(archive_target))
            gb.rc.print(f"‚úÖ –ê—Ä—Ö–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω: {zip_path.name} ‚Üí {archive_target.name}", style="green")
            
            return True
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ {zip_path.name}: {e}", style="red")
            return False
    
    def monitor_zip_files(self) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ZIP —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
        """
        gb.rc.print(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ZIP —Ñ–∞–π–ª–æ–≤ –≤: {self.download_path}", style="blue")
        
        while self.monitor_running:
            try:
                # –ò—â–µ–º –≤—Å–µ ZIP —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫
                zip_files = list(self.download_path.glob("*.zip"))
                
                for zip_file in zip_files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
                    if zip_file.name not in self.processed_files:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
                        initial_size = zip_file.stat().st_size
                        sleep(pauses.archive['file_stability_check'], "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞ ZIP —Ñ–∞–π–ª–∞")
                        
                        if zip_file.exists() and zip_file.stat().st_size == initial_size:
                            # –§–∞–π–ª —Å—Ç–∞–±–∏–ª–µ–Ω, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                            if self.extract_zip_archive(zip_file):
                                self.processed_files.add(zip_file.name)
                        else:
                            gb.rc.print(f"‚è≥ –§–∞–π–ª {zip_file.name} –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", style="yellow")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                sleep(pauses.archive['monitor_cycle'], "–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤")
                
            except Exception as e:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ ZIP —Ñ–∞–π–ª–æ–≤: {e}", style="red")
                sleep(pauses.archive['error_recovery'], "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        gb.rc.print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ZIP —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def start_monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤
        """
        if not self.monitor_running:
            self.monitor_running = True
            self.monitor_thread = threading.Thread(
                target=self.monitor_zip_files,
                daemon=True,
                name="ArchiveMonitorThread"
            )
            self.monitor_thread.start()
            gb.rc.print("üöÄ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω", style="green")
    
    def stop_monitor(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤
        """
        if self.monitor_running:
            self.monitor_running = False
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=10)
            gb.rc.print("üõë –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ZIP —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def is_monitoring(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.monitor_running
