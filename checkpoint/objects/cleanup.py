import threading
from pathlib import Path
from typing import List, Set

from checkpoint import globals as gb
from checkpoint.knowledge import pauses
from checkpoint.knowledge.fs import path as fs_path, cleanup as cleanup_config
from checkpoint.helpers.utils import sleep


class CleanupManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    - –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    
    def __init__(self, target_path: Path, file_patterns: List[str] = None, folder_patterns: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—á–∏—Å—Ç–∫–∏
        
        Args:
            target_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            file_patterns: –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['start_here.html', 'start_here_*.html'])
            folder_patterns: –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ)
        """
        self.target_path = target_path
        self.file_patterns = file_patterns or cleanup_config['file_patterns']
        self.folder_patterns = folder_patterns or cleanup_config['folder_patterns']
        self.folder_path_patterns = cleanup_config.get('folder_path_patterns', [])
        self.subfolder_cleanup_rules = cleanup_config.get('subfolder_cleanup_rules', [])
        self.monitor_running = False
        self.monitor_thread = None
        self.deleted_files: Set[str] = set()
        
    def matches_pattern(self, name: str, pattern: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        
        Args:
            name: –ò–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏
            pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç * –∫–∞–∫ wildcard)
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–º—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É
        """
        if '*' not in pattern:
            return name == pattern
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è wildcard matching
        parts = pattern.split('*')
        if len(parts) == 2:
            prefix, suffix = parts
            return name.startswith(prefix) and name.endswith(suffix)
        
        return False
    
    def should_delete_file(self, file_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        """
        filename = file_path.name
        
        for pattern in self.file_patterns:
            if self.matches_pattern(filename, pattern):
                return True
        
        return False
    
    def should_delete_folder_root(self, folder_path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –≤ –∫–æ—Ä–Ω–µ (—Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏)
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–∞–ø–∫—É –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        """
        foldername = folder_path.name
        
        for pattern in self.folder_patterns:
            if self.matches_pattern(foldername, pattern):
                return True
        
        return False
    

    def cleanup_files(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        deleted_count = 0
        
        try:
            if not self.target_path.exists():
                gb.rc.print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.target_path}", style="yellow")
                return 0
            
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for item in self.target_path.iterdir():
                if item.is_file() and self.should_delete_file(item):
                    try:
                        item.unlink()
                        gb.rc.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item.name}", style="green")
                        deleted_count += 1
                        self.deleted_files.add(item.name)
                    except Exception as e:
                        gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {item.name}: {e}", style="red")
            
            return deleted_count
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}", style="red")
            return deleted_count
    
    def cleanup_subfolders_with_exclusions(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∞–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
        –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–∞–ø–∫–∞–º–∏ –≤ –∫–æ—Ä–Ω–µ target_path
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∞–ø–æ–∫
        """
        deleted_count = 0
        
        try:
            if not self.target_path.exists():
                return 0
            
            for rule in self.subfolder_cleanup_rules:
                parent_folder_name = rule['parent_folder']
                exclude_subfolders = rule.get('exclude_subfolders', [])
                
                # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ target_path
                parent_folder_path = self.target_path / parent_folder_name
                
                if not parent_folder_path.exists() or not parent_folder_path.is_dir():
                    continue
                
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –ø–æ–¥–ø–∞–ø–∫–∏ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)
                for subfolder in parent_folder_path.iterdir():
                    if subfolder.is_dir() and subfolder.name not in exclude_subfolders:
                        try:
                            import shutil
                            shutil.rmtree(subfolder)
                            gb.rc.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∞–ø–∫–∞: {parent_folder_name}/{subfolder.name}", style="green")
                            deleted_count += 1
                            self.deleted_files.add(f"{parent_folder_name}/{subfolder.name}")
                        except Exception as e:
                            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∞–ø–∫–∏ {parent_folder_name}/{subfolder.name}: {e}", style="red")
            
            return deleted_count
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–¥–ø–∞–ø–æ–∫ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏: {e}", style="red")
            return deleted_count
    
    def cleanup_folders_root(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ target_path, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        """
        deleted_count = 0
        
        try:
            if not self.target_path.exists():
                gb.rc.print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.target_path}", style="yellow")
                return 0
            
            # –ò—â–µ–º –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for item in self.target_path.iterdir():
                if item.is_dir() and self.should_delete_folder_root(item):
                    try:
                        import shutil
                        shutil.rmtree(item)
                        gb.rc.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ (–∫–æ—Ä–µ–Ω—å): {item.name}", style="green")
                        deleted_count += 1
                        self.deleted_files.add(item.name)
                    except Exception as e:
                        gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {item.name}: {e}", style="red")
            
            return deleted_count
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ: {e}", style="red")
            return deleted_count
    
    def cleanup_folders_by_path(self) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ 1-2 –æ—Ç –∫–æ—Ä–Ω—è)
        –ù–∞–ø—Ä–∏–º–µ—Ä: connections/followers - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ H:/connections/followers
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        """
        deleted_count = 0
        
        try:
            if not self.target_path.exists():
                return 0
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É –ø—É—Ç–∏
            for pattern in self.folder_path_patterns:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "connections/followers" -> ["connections", "followers"])
                parts = pattern.split('/')
                
                # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç target_path
                folder_path = self.target_path
                for part in parts:
                    folder_path = folder_path / part
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–∞ –ø–∞–ø–∫–∞, –∏ —É–¥–∞–ª—è–µ–º –µ—ë
                if folder_path.exists() and folder_path.is_dir():
                    try:
                        import shutil
                        relative_path = folder_path.relative_to(self.target_path)
                        shutil.rmtree(folder_path)
                        gb.rc.print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ (–ø–æ –ø—É—Ç–∏): {relative_path}", style="green")
                        deleted_count += 1
                        self.deleted_files.add(str(relative_path))
                    except Exception as e:
                        gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {pattern}: {e}", style="red")
            
            return deleted_count
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–∞–ø–æ–∫ –ø–æ –ø—É—Ç–∏: {e}", style="red")
            return deleted_count
    
    def monitor_cleanup(self) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É
        """
        gb.rc.print(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–∏—Å—Ç–∫–∏ –≤: {self.target_path}", style="blue")
        gb.rc.print(f"üìã –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–∞–π–ª–æ–≤ (–∫–æ—Ä–µ–Ω—å): {self.file_patterns}", style="cyan")
        gb.rc.print(f"üìã –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∞–ø–æ–∫ (–∫–æ—Ä–µ–Ω—å): {self.folder_patterns}", style="cyan")
        if self.folder_path_patterns:
            gb.rc.print(f"üìã –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–∞–ø–æ–∫ (–ø–æ –ø—É—Ç–∏): {self.folder_path_patterns}", style="cyan")
        if self.subfolder_cleanup_rules:
            gb.rc.print(f"üìã –ü—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∞–ø–æ–∫: {self.subfolder_cleanup_rules}", style="cyan")
        task_name = "CleanupManager"
        
        while self.monitor_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
                if not gb.task_sync.can_run_task(task_name):
                    gb.rc.print(f"‚è∏Ô∏è CleanupManager: –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {gb.task_sync.get_current_running_task()}", style="yellow")
                    sleep(pauses.cleanup['monitor_cycle'], "–ü–∞—É–∑–∞ - –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ç–∞—Å–∫–∞")
                    continue
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–±—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Å–∫
                if not gb.task_sync.is_task_running():
                    gb.task_sync.set_current_running_task(task_name)
                    gb.rc.print(f"‚ñ∂Ô∏è CleanupManager: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", style="green")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ)
                files_deleted = self.cleanup_files()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ
                folders_deleted_root = self.cleanup_folders_root()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–ø–æ–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
                folders_deleted_path = self.cleanup_folders_by_path()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ–¥–ø–∞–ø–æ–∫ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
                subfolders_deleted = self.cleanup_subfolders_with_exclusions()
                
                total_folders = folders_deleted_root + folders_deleted_path + subfolders_deleted
                if files_deleted > 0 or total_folders > 0:
                    gb.rc.print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {files_deleted} —Ñ–∞–π–ª–æ–≤ –∏ {total_folders} –ø–∞–ø–æ–∫", style="green")
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π
                if gb.task_sync.is_task_running(task_name):
                    gb.task_sync.set_current_running_task(None)
                    gb.rc.print(f"‚è∏Ô∏è CleanupManager: –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞—É–∑—É", style="cyan")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                sleep(pauses.cleanup['monitor_cycle'], "–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏")
                
            except Exception as e:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –æ—á–∏—Å—Ç–∫–∏: {e}", style="red")
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if gb.task_sync.is_task_running(task_name):
                    gb.task_sync.set_current_running_task(None)
                sleep(pauses.cleanup['error_recovery'], "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –æ—á–∏—Å—Ç–∫–µ")
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        if gb.task_sync.is_task_running(task_name):
            gb.task_sync.set_current_running_task(None)
        
        gb.rc.print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def start_monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—Å—Ç–∫–∏
        """
        if not self.monitor_running:
            self.monitor_running = True
            self.monitor_thread = threading.Thread(
                target=self.monitor_cleanup,
                daemon=True,
                name="CleanupMonitorThread"
            )
            self.monitor_thread.start()
            gb.rc.print("üöÄ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω", style="green")
    
    def stop_monitor(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—Å—Ç–∫–∏
        """
        if self.monitor_running:
            self.monitor_running = False
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=10)
            gb.rc.print("üõë –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def is_monitoring(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.monitor_running
