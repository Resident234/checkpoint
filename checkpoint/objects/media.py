import os
import re
import shutil
import threading
from pathlib import Path
from typing import Set

from checkpoint import globals as gb
from checkpoint.knowledge import pauses
from checkpoint.helpers.utils import sleep
from checkpoint.helpers.fs import get_unique_filename, merge_directories, clean_folder_name


class MediaManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫ Facebook
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ your_facebook_activity/posts/media
    - –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω –ø–∞–ø–æ–∫ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    - –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞–ø–æ–∫ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é PHOTO
    """
    
    def __init__(self, media_path: Path, photo_path: Path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ–¥–∏–∞
        
        Args:
            media_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ your_facebook_activity/posts/media
            photo_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ PHOTO (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ —á—Ç–æ –∏ your_facebook_activity)
        """
        self.media_path = media_path
        self.photo_path = photo_path
        self.monitor_running = False
        self.monitor_thread = None
        self.processed_folders: Set[str] = set()
    
    def process_folder(self, folder_path: Path) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤ PHOTO
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            original_name = folder_path.name
            cleaned_name = clean_folder_name(original_name)
            
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞ –Ω–µ –±—ã–ª–æ
            if original_name == cleaned_name:
                gb.rc.print(f"üìÅ –ü–∞–ø–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —á–∏—Å—Ç–æ–µ –∏–º—è: {original_name}", style="blue")
            else:
                gb.rc.print(f"üîß –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: {original_name} ‚Üí {cleaned_name}", style="cyan")
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                new_folder_path = folder_path.parent / cleaned_name
                
                if new_folder_path.exists():
                    # –ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                    gb.rc.print(f"üìÅ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–æ–π: {cleaned_name}", style="yellow")
                    merge_directories(folder_path, new_folder_path)
                    if folder_path.exists():
                        shutil.rmtree(str(folder_path))
                        gb.rc.print(f"üóëÔ∏è –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {folder_path.name}", style="cyan")
                else:
                    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                    folder_path.rename(new_folder_path)
                
                folder_path = new_folder_path
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É PHOTO –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.photo_path.mkdir(exist_ok=True)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É –≤ PHOTO
            photo_target = self.photo_path / folder_path.name
            
            if photo_target.exists():
                # –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PHOTO, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                gb.rc.print(f"üìÅ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–∞–ø–∫–æ–π –≤ {self.photo_path}: {folder_path.name}", style="yellow")
                merge_directories(folder_path, photo_target)
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                if folder_path.exists():
                    shutil.rmtree(str(folder_path))
                    gb.rc.print(f"üóëÔ∏è –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {folder_path.name}", style="cyan")
            else:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É –≤ PHOTO
                shutil.move(str(folder_path), str(photo_target))
                gb.rc.print(f"üì¶ –ü–∞–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {self.photo_path}: {folder_path.name}", style="green")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å
                if folder_path.exists():
                    shutil.rmtree(str(folder_path))
                    gb.rc.print(f"üóëÔ∏è –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {folder_path.name}", style="cyan")
            
            return True
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ {folder_path.name}: {e}", style="red")
            return False
    
    def monitor_media_folders(self) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–∞–ø–∫—É –º–µ–¥–∏–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏
        """
        gb.rc.print(f"üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫ –≤: {self.media_path}", style="blue")
        
        while self.monitor_running:
            try:
                if not self.media_path.exists():
                    gb.rc.print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.media_path}", style="yellow")
                    sleep(pauses.media['folder_scan'], "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –º–µ–¥–∏–∞")
                    continue
                
                # –ò—â–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–µ–¥–∏–∞
                media_folders = [item for item in self.media_path.iterdir() if item.is_dir()]
                
                for folder in media_folders:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –ø–∞–ø–∫—É
                    if folder.name not in self.processed_folders:
                        gb.rc.print(f"üÜï –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {folder.name}", style="cyan")
                        
                        if self.process_folder(folder):
                            self.processed_folders.add(folder.name)
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞–ø–æ–∫
                        sleep(pauses.media['processing_cycle'], "–ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞–ø–æ–∫ –º–µ–¥–∏–∞")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                sleep(pauses.media['folder_scan'], "–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞–ø–æ–∫ –º–µ–¥–∏–∞")
                
            except Exception as e:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫: {e}", style="red")
                sleep(pauses.media['error_recovery'], "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –º–µ–¥–∏–∞")
        
        gb.rc.print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def start_monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫
        """
        if not self.monitor_running:
            self.monitor_running = True
            self.monitor_thread = threading.Thread(
                target=self.monitor_media_folders,
                daemon=True,
                name="MediaProcessorThread"
            )
            self.monitor_thread.start()
            gb.rc.print("üöÄ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫ –∑–∞–ø—É—â–µ–Ω", style="green")
    
    def stop_monitor(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫
        """
        if self.monitor_running:
            self.monitor_running = False
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=10)
            gb.rc.print("üõë –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ–¥–∏–∞ –ø–∞–ø–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def is_monitoring(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.monitor_running
