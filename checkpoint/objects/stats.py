import os
import re
import threading
from datetime import datetime
from pathlib import Path
from typing import Dict, Tuple

from checkpoint import globals as gb
from checkpoint.knowledge import pauses
from checkpoint.helpers.utils import sleep


class PhotoStatsManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ PHOTO
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ PHOTO –∫–∞–∂–¥—ã–π —á–∞—Å
    - –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥—É–±–ª–∏ (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _2, _3 –∏ —Ç.–¥.)
    - –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
    """
    
    def __init__(self, photo_path: Path, stats_logs_path: Path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            photo_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ PHOTO
            stats_logs_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        self.photo_path = photo_path
        self.stats_logs_path = stats_logs_path
        self.monitor_running = False
        self.monitor_thread = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.stats_logs_path.mkdir(exist_ok=True)
    
    def is_duplicate_file(self, filename: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥—É–±–ª–µ–º (–∏–º–µ–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å _2, _3 –∏ —Ç.–¥.)
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –¥—É–±–ª–µ–º
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥—É–±–ª—è: _—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        pattern = r'_\d+\.[^.]+$'
        return bool(re.search(pattern, filename))
    
    def get_files_added_today(self) -> Tuple[int, int]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –ø–∞–ø–∫—É PHOTO
        
        Returns:
            Tuple[int, int]: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π)
        """
        if not self.photo_path.exists():
            gb.rc.print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {self.photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", style="yellow")
            return 0, 0
        
        today = datetime.now().date()
        new_files_count = 0
        duplicate_files_count = 0
        
        try:
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ PHOTO
            for root, dirs, files in os.walk(self.photo_path):
                for file in files:
                    file_path = Path(root) / file
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        creation_time = os.path.getctime(file_path)
                        file_date = datetime.fromtimestamp(creation_time).date()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è
                        if file_date == today:
                            if self.is_duplicate_file(file):
                                duplicate_files_count += 1
                            else:
                                new_files_count += 1
                    
                    except (OSError, ValueError) as e:
                        gb.rc.print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ñ–∞–π–ª–∞ {file_path}: {e}", style="yellow")
                        continue
            
            return new_files_count, duplicate_files_count
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {self.photo_path}: {e}", style="red")
            return 0, 0
    
    def write_daily_stats(self, new_files: int, duplicates: int) -> None:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        
        Args:
            new_files: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            duplicates: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY.log
            today = datetime.now()
            log_filename = today.strftime("%d.%m.%Y.log")
            log_file_path = self.stats_logs_path / log_filename
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_entry = f"{today.strftime('%d.%m.%Y')} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {new_files}, –¥—É–±–ª–µ–π {duplicates}\n"
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
            with open(log_file_path, 'w', encoding='utf-8') as f:
                f.write(stats_entry)
            
            gb.rc.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {log_filename}: –Ω–æ–≤—ã—Ö {new_files}, –¥—É–±–ª–µ–π {duplicates}", style="green")
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
    
    def collect_and_log_stats(self) -> None:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥
        """
        gb.rc.print(f"üìä –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ {self.photo_path}...", style="blue")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥—É–±–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            new_files, duplicates = self.get_files_added_today()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥
            self.write_daily_stats(new_files, duplicates)
            
            gb.rc.print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞: –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {new_files}, –¥—É–±–ª–µ–π {duplicates}", style="green")
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
    
    def monitor_photo_stats(self) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
        """
        gb.rc.print(f"üìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ {self.photo_path}", style="blue")
        
        while self.monitor_running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.collect_and_log_stats()
                
                # –ñ–¥–µ–º —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                sleep(pauses.stats['hourly_check'], "–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                
            except Exception as e:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
                sleep(pauses.stats['error_recovery'], "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        gb.rc.print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def start_monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        if not self.monitor_running:
            self.monitor_running = True
            self.monitor_thread = threading.Thread(
                target=self.monitor_photo_stats,
                daemon=True,
                name="PhotoStatsThread"
            )
            self.monitor_thread.start()
            gb.rc.print("üöÄ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω", style="green")
    
    def stop_monitor(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        if self.monitor_running:
            self.monitor_running = False
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=10)
            gb.rc.print("üõë –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def is_monitoring(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.monitor_running
