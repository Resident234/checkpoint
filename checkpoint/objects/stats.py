import os
import re
import threading
from datetime import datetime
from pathlib import Path
from typing import Dict, Tuple, List, Optional

from checkpoint import globals as gb
from checkpoint.knowledge import pauses
from checkpoint.helpers.utils import sleep
from checkpoint.helpers.email import send_notification_email
from checkpoint import config


class PhotoStatsManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ PHOTO
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ PHOTO –∫–∞–∂–¥—ã–π —á–∞—Å
    - –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –¥—É–±–ª–∏ (—Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ _2, _3 –∏ —Ç.–¥.)
    - –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
    """
    
    def __init__(self, photo_path: Path, stats_logs_path: Path, send_email: bool = False, email_to: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            photo_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ PHOTO
            stats_logs_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            send_email: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ email –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            email_to: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.NOTIFY_EMAIL)
        """
        self.photo_path = photo_path
        self.stats_logs_path = stats_logs_path
        self.send_email = send_email
        self.email_to = email_to
        self.monitor_running = False
        self.monitor_thread = None
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.stats_logs_path.mkdir(exist_ok=True)
    
    def is_duplicate_file(self, filename: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –¥—É–±–ª–µ–º (–∏–º–µ–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å _2, _3 –∏ —Ç.–¥.)
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –¥—É–±–ª–µ–º
        """
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥—É–±–ª—è: _—á–∏—Å–ª–æ –ø–µ—Ä–µ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        pattern = r'_\d+\.[^.]+$'
        return bool(re.search(pattern, filename))
    
    def get_files_added_today(self) -> Tuple[int, int, List[str], List[str]]:
        """
        –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –≤ –ø–∞–ø–∫—É PHOTO
        
        Returns:
            Tuple[int, int, List[str], List[str]]: (
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π,
                —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥—É–±–ª–µ–π
            )
        """
        if not self.photo_path.exists():
            gb.rc.print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {self.photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", style="yellow")
            return 0, 0, [], []
        
        today = datetime.now().date()
        new_files_count = 0
        duplicate_files_count = 0
        new_file_names: List[str] = []
        duplicate_file_names: List[str] = []
        
        try:
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ PHOTO
            for root, dirs, files in os.walk(self.photo_path):
                for file in files:
                    file_path = Path(root) / file
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        creation_time = os.path.getctime(file_path)
                        file_date = datetime.fromtimestamp(creation_time).date()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è
                        if file_date == today:
                            if self.is_duplicate_file(file):
                                duplicate_files_count += 1
                                duplicate_file_names.append(str(file_path))
                            else:
                                new_files_count += 1
                                new_file_names.append(str(file_path))
                    
                    except (OSError, ValueError) as e:
                        gb.rc.print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ñ–∞–π–ª–∞ {file_path}: {e}", style="yellow")
                        continue
            
            return new_files_count, duplicate_files_count, new_file_names, duplicate_file_names
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {self.photo_path}: {e}", style="red")
            return 0, 0, [], []
    
    def write_daily_stats(
        self, 
        new_files: int, 
        duplicates: int, 
        new_names: Optional[List[str]] = None, 
        dup_names: Optional[List[str]] = None
    ) -> None:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        
        Args:
            new_files: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            duplicates: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π
            new_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            dup_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY.log
            today = datetime.now()
            log_filename = today.strftime("%d.%m.%Y.log")
            log_file_path = self.stats_logs_path / log_filename
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—à–∞–ø–∫–∞)
            stats_lines = [f"{today.strftime('%d.%m.%Y')} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {new_files}, –¥—É–±–ª–µ–π {duplicates}"]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏–º–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if new_names:
                stats_lines.append("–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
                stats_lines.extend([f"  - {name}" for name in new_names])
            if dup_names:
                stats_lines.append("–î—É–±–ª–∏:")
                stats_lines.extend([f"  - {name}" for name in dup_names])
            
            stats_entry = "\n".join(stats_lines) + "\n"
            
            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
            with open(log_file_path, 'w', encoding='utf-8') as f:
                f.write(stats_entry)
            
            gb.rc.print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {log_filename}: –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {new_files}, –¥—É–±–ª–µ–π {duplicates}", style="green")
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
    
    def print_daily_stats(
        self, 
        new_files: int, 
        duplicates: int, 
        new_names: Optional[List[str]] = None, 
        dup_names: Optional[List[str]] = None
    ) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –ø–æ–∏–º–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥—É–±–ª–µ–π
        
        Args:
            new_files: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            duplicates: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π
            new_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            dup_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        try:
            # –ü–æ–∏–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if new_names:
                gb.rc.print("üÜï –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:", style="blue")
                for name in new_names:
                    gb.rc.print(f"  - {name}", style="blue")
            if dup_names:
                gb.rc.print("‚ôªÔ∏è –î—É–±–ª–∏:", style="yellow")
                for name in dup_names:
                    gb.rc.print(f"  - {name}", style="yellow")
                
            
            gb.rc.print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞: –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {new_files}, –¥—É–±–ª–µ–π {duplicates}", style="green")

        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–æ–≤ —Ñ–∞–π–ª–æ–≤: {e}", style="red")
    
    def send_stats_email(
        self, 
        to_email: str,
        new_files: int, 
        duplicates: int, 
        new_names: Optional[List[str]] = None, 
        dup_names: Optional[List[str]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ email
        
        Args:
            to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            new_files: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            duplicates: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π
            new_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            dup_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
        Returns:
            bool: True –µ—Å–ª–∏ email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            today_date = datetime.now().strftime("%d.%m.%Y")
            
            subject = f"CheckPoint: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞ {today_date}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message_lines = [
                "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ CheckPoint",
                "",
                f"–î–∞—Ç–∞: {today_date}",
                f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {current_time}",
                f"–ü–∞–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {self.photo_path}",
                "",
                "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:",
                f"üÜï –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {new_files}",
                f"‚ôªÔ∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {duplicates}",
                f"üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {new_files + duplicates}",
                ""
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if new_names and len(new_names) > 0:
                message_lines.extend([
                    "üÜï –ù–û–í–´–ï –§–ê–ô–õ–´:",
                    ""
                ])
                for i, name in enumerate(new_names, 1):
                    message_lines.append(f"{i:3d}. {name}")
                message_lines.append("")
            
            if dup_names and len(dup_names) > 0:
                message_lines.extend([
                    "‚ôªÔ∏è –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´:",
                    ""
                ])
                for i, name in enumerate(dup_names, 1):
                    message_lines.append(f"{i:3d}. {name}")
                message_lines.append("")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_lines.extend([
                "---",
                "–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ—Ç CheckPoint",
                f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.stats_logs_path}"
            ])
            
            message = "\n".join(message_lines)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            success = send_notification_email(to_email, subject, message)
            
            if success:
                gb.rc.print(f"üìß –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email {to_email}", style="green")
            else:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ email {to_email}", style="red")
                
            return success
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ email: {e}", style="red")
            return False
    
    def collect_and_log_stats(self) -> None:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥
        –û—Ç–ø—Ä–∞–≤–∫–∞ email –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        """
        gb.rc.print(f"üìä –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ {self.photo_path}...", style="blue")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥—É–±–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            new_files, duplicates, new_names, dup_names = self.get_files_added_today()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥ (–≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤)
            self.write_daily_stats(new_files, duplicates, new_names, dup_names)

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
            self.print_daily_stats(new_files, duplicates, new_names, dup_names)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ email, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if self.send_email:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                recipient_email = self.email_to or config.NOTIFY_EMAIL
                if recipient_email:
                    self.send_stats_email(recipient_email, new_files, duplicates, new_names, dup_names)
                else:
                    gb.rc.print("‚ö†Ô∏è Email –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.NOTIFY_EMAIL", style="yellow")
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
    
    def send_current_stats_email(self, email_to: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ email
        
        Args:
            email_to: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ config.NOTIFY_EMAIL)
            
        Returns:
            bool: True –µ—Å–ª–∏ email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        try:
            gb.rc.print("üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ email...", style="blue")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_files, duplicates, new_names, dup_names = self.get_files_added_today()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            recipient_email = email_to or config.NOTIFY_EMAIL
            if not recipient_email:
                gb.rc.print("‚ùå Email –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.NOTIFY_EMAIL", style="red")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            return self.send_stats_email(recipient_email, new_files, duplicates, new_names, dup_names)
            
        except Exception as e:
            gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ email: {e}", style="red")
            return False
    
    def collect_and_email_stats(self) -> None:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ email
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        """
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º email –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
        original_send_email = self.send_email
        self.send_email = True
        try:
            self.collect_and_log_stats()
        finally:
            self.send_email = original_send_email
    
    def monitor_photo_stats(self) -> None:
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        """
        gb.rc.print(f"üìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ {self.photo_path}", style="blue")
        if self.send_email:
            recipient = self.email_to or config.NOTIFY_EMAIL
            gb.rc.print(f"üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ {recipient}", style="blue")
        
        while self.monitor_running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.collect_and_log_stats()
                
                # –ñ–¥–µ–º —á–∞—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                sleep(pauses.stats['hourly_check'], "–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                
            except Exception as e:
                gb.rc.print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", style="red")
                sleep(pauses.stats['error_recovery'], "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        gb.rc.print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def start_monitor(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        """
        if not self.monitor_running:
            self.monitor_running = True
            self.monitor_thread = threading.Thread(
                target=self.monitor_photo_stats,
                daemon=True,
                name="PhotoStatsThread"
            )
            self.monitor_thread.start()
            gb.rc.print("üöÄ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω", style="green")
    
    def stop_monitor(self) -> None:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        if self.monitor_running:
            self.monitor_running = False
            if self.monitor_thread and self.monitor_thread.is_alive():
                self.monitor_thread.join(timeout=10)
            gb.rc.print("üõë –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", style="red")
    
    def is_monitoring(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
        """
        return self.monitor_running
